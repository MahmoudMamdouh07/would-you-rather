{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mahmo\\\\would-you-rather\\\\src\\\\components\\\\App.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { handleInitialData } from \"../actions/shared\";\nimport LoadingBar from \"react-redux-loading\";\nimport Nav from \"./Nav\";\nimport Routes from \"./Routes\"; // adding Loading bar inside the container is not right, so it should be under router but that will lead to having to render two things under Router, so we could add a div but that's too excessive so we add a fragment\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.dispatch(handleInitialData());\n  }\n\n  render() {\n    const {\n      notAuthorized\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(LoadingBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(NavBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Routes, {\n      notAuthorized: notAuthorized,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nfunction mapStateToProps({\n  authedUser\n}) {\n  return {\n    loading: authedUser === null,\n    notAuthorized: authedUser === null\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n/*\nconnect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\nmapStateToProps - If this argument is specified,\n the new component will subscribe to Redux store updates. \n This means that any time the store is updated, \n mapStateToProps will be called. The results of mapStateToProps \n must be a plain object, which will be merged into the component’s\n  props. If you don't want to subscribe to store updates, pass null \n  or undefined in place of mapStateToProps.\n\nmapDispatchToProps - If an object is passed, \neach function inside it is assumed to be a Redux action creator. \nAn object with the same function names,\n but with every action creator wrapped into a dispatch call \n so they may be invoked directly, will be merged into the component’s \n props. If a function is passed, it will be given dispatch as the first\n parameter. It’s up to you to return an object that somehow uses\n  dispatch to bind action creators in your own way.\n   (Tip: you may use the bindActionCreators() helper from Redux.)\n\n   */","map":{"version":3,"sources":["C:/Users/mahmo/would-you-rather/src/components/App.js"],"names":["React","Component","Fragment","BrowserRouter","Router","Route","connect","handleInitialData","LoadingBar","Nav","Routes","App","componentDidMount","props","dispatch","render","notAuthorized","mapStateToProps","authedUser","loading"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,QAA+C,kBAA/C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CACA;;AACA,MAAMC,GAAN,SAAkBV,SAAlB,CAA4B;AAC1BW,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWC,QAAX,CAAoBP,iBAAiB,EAArC;AACD;;AACDQ,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAoB,KAAKH,KAA/B;AACA,wBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,MAAD;AAAQ,MAAA,aAAa,EAAEG,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAFF,CADF,CADF;AAWD;;AAjByB;;AAoB5B,SAASC,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAyC;AACvC,SAAO;AACLC,IAAAA,OAAO,EAAED,UAAU,KAAK,IADnB;AAELF,IAAAA,aAAa,EAAEE,UAAU,KAAK;AAFzB,GAAP;AAID;;AAED,eAAeZ,OAAO,CAACW,eAAD,CAAP,CAAyBN,GAAzB,CAAf;AAEA","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { handleInitialData } from \"../actions/shared\";\nimport LoadingBar from \"react-redux-loading\";\nimport Nav from \"./Nav\";\nimport Routes from \"./Routes\";\n// adding Loading bar inside the container is not right, so it should be under router but that will lead to having to render two things under Router, so we could add a div but that's too excessive so we add a fragment\nclass App extends Component {\n  componentDidMount() {\n    this.props.dispatch(handleInitialData());\n  }\n  render() {\n    const { notAuthorized } = this.props;\n    return (\n      <Router>\n        <Fragment>\n          <LoadingBar />\n          <div className=\"main-container\">\n            <NavBar />\n            <Routes notAuthorized={notAuthorized} />\n          </div>\n        </Fragment>\n      </Router>\n    );\n  }\n}\n\nfunction mapStateToProps({ authedUser }) {\n  return {\n    loading: authedUser === null,\n    notAuthorized: authedUser === null,\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n\n/*\nconnect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\nmapStateToProps - If this argument is specified,\n the new component will subscribe to Redux store updates. \n This means that any time the store is updated, \n mapStateToProps will be called. The results of mapStateToProps \n must be a plain object, which will be merged into the component’s\n  props. If you don't want to subscribe to store updates, pass null \n  or undefined in place of mapStateToProps.\n\nmapDispatchToProps - If an object is passed, \neach function inside it is assumed to be a Redux action creator. \nAn object with the same function names,\n but with every action creator wrapped into a dispatch call \n so they may be invoked directly, will be merged into the component’s \n props. If a function is passed, it will be given dispatch as the first\n parameter. It’s up to you to return an object that somehow uses\n  dispatch to bind action creators in your own way.\n   (Tip: you may use the bindActionCreators() helper from Redux.)\n\n   */\n"]},"metadata":{},"sourceType":"module"}